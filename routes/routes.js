// Generated by CoffeeScript 1.6.3
(function() {
  var Flickr, Geocoder;

  exports.codem = function(req, res) {
    var obj;
    obj = {
      title: 'Dev'
    };
    return res.render('codem');
  };

  exports.demos = function(req, res) {
    var demoType, obj, title;
    demoType = req.params['type'];
    obj = title = demoType;
    return res.render('demos/' + demoType, obj);
  };

  exports.index = function(req, res) {
    var obj;
    obj = {
      title: 'd3 ——  Data Visualization'
    };
    return res.render('index', obj);
  };

  exports.loaders = function(req, res) {
    var obj;
    obj = {
      title: 'Loaders',
      amount: 10
    };
    return res.render('loaders', obj);
  };

  exports.map = function(req, res) {
    var options, renderer;
    renderer = req.params['renderer'];
    options = {
      renderer: {
        name: renderer,
        isCanvas: renderer === 'canvas'
      },
      title: renderer.toUpperCase() + ' Map'
    };
    return res.render('maps', options);
  };

  Flickr = (function() {
    Flickr.prototype.api_key = {
      'api_key': '7e6f810e37d4482c2da35dd883bbd7f6'
    };

    Flickr.prototype.flickr = require('node-flickr');

    Flickr.prototype.api = null;

    function Flickr() {
      this.createFlickr();
    }

    Flickr.prototype.createFlickr = function() {
      return this.api = new this.flickr(this.api_key);
    };

    Flickr.prototype.getPhotos = function(page, cb) {
      var obj, photos;
      photos = {};
      obj = {
        user_id: '42877615@N04',
        tags: 'wexplore',
        has_geo: '0',
        per_page: '500',
        page: page
      };
      return this.api.get('photos.search', obj, cb);
    };

    Flickr.prototype.getLocations = function(photos, cb) {
      var i, maxPhotos, obj, photoLoaded, resp,
        _this = this;
      maxPhotos = 10;
      i = 0;
      resp = [];
      photoLoaded = function(data) {
        var obj;
        resp.push(data);
        obj = {
          photo_id: photos.photo[++i].id
        };
        if (data.stat === 'fail') {
          return _this.api.get('photos.geo.getLocation', obj, photoLoaded);
        } else {
          return cb(data);
        }
      };
      obj = {
        photo_id: photos.photo[++i].id
      };
      return this.api.get('photos.geo.getLocation', obj, photoLoaded);
    };

    return Flickr;

  })();

  Geocoder = (function() {
    Geocoder.prototype.api_key = 'AIzaSyDn9BPGUMYumxXdTT_jSx4KL68jQZBlcKk';

    Geocoder.prototype.provider = 'google';

    Geocoder.prototype.adapter = 'http';

    Geocoder.prototype.geocoder = null;

    function Geocoder() {
      this.createGeocoder();
    }

    Geocoder.prototype.createGeocoder = function() {
      var opts;
      opts = {
        apiKey: this.api_key,
        formatter: null
      };
      return this.geocoder = require('node-geocoder').getGeocoder(this.provider, this.adapter, opts);
    };

    Geocoder.prototype.getLocation = function(city, cb) {
      return this.geocoder.geocode(city, cb);
    };

    return Geocoder;

  })();

  exports.thinkData = function(req, res) {
    var cb, citycount, correctNames, data, f, filename, fs, geo, i, obj, pages, photos, _,
      _this = this;
    fs = require('fs');
    _ = require('underscore');
    correctNames = {
      'Ringha Village, China': 'Deqin, China',
      'Ringha Village, Tibet': 'Deqin, China',
      'Garmisch-Partinkirchen, Germany': 'Garmisch-Partenkirchen, Germany',
      'Kleinmachnow, Germany': 'Dahlem, Germany',
      'Karlsruhe, Germany': 'Durlach, Germany',
      'Thimphu, Bhutan': 'Paro, Bhutan',
      'Osorakan Park, Japan': 'Hiroshima, Japan',
      'Donsao, Laos': 'Nong Ruea Sao, Thailand',
      'Punahka, Bhutan': 'Paro, Bhutan',
      'Colonia, Uruguay': 'Colonia del Sacramento, Uruguay'
    };
    f = new Flickr();
    geo = new Geocoder();
    filename = 'public/json/tgs.json';
    obj = {};
    obj.flickr = f;
    pages = 7;
    i = 1;
    photos = {};
    citycount = 0;
    data = require(filename);
    res.json(data);
    return;
    cb = function(data) {
      var city, fn, photo, photoArray, photoCount, _photo;
      for (photo in data.photos.photo) {
        _photo = data.photos.photo[photo];
        city = _photo.title.split('(')[1];
        if (city != null) {
          ++citycount;
          city = city.substring(0, city.length - 1);
          if (city.split(',').length > 1) {
            if (photos[city] != null) {
              photos[city].photos.push(_photo);
            } else {
              photos[city] = {
                photos: [_photo],
                location: {
                  title: city,
                  coords: []
                }
              };
            }
          }
        }
      }
      if (++i > pages) {
        photoArray = _.toArray(photos);
        photoCount = photoArray.length;
        fn = function(err, resp) {
          var property, _i, _json, _len;
          if (resp != null) {
            photoArray[photoCount].location.title;
            for (_i = 0, _len = resp.length; _i < _len; _i++) {
              property = resp[_i];
              photoArray[photoCount].location.coords.push(property);
            }
          } else {
            geo.getLocation(correctNames[photoArray[photoCount].location.title], fn);
            return;
          }
          if (photoCount > 0) {
            photoCount--;
            return geo.getLocation(photoArray[photoCount].location.title, fn);
          } else {
            res.json(photoArray);
            _json = JSON.stringify(photoArray);
            return fs.writeFile('./' + filename, _json, function(err) {
              if (err != null) {
                return console.log(err);
              } else {
                return console.log('saved');
              }
            });
          }
        };
        return geo.getLocation(photoArray[--photoCount].location.title, fn);
      } else {
        return f.getPhotos(i, cb);
      }
    };
    return f.getPhotos(i, cb);
  };

  exports.tgs = function(req, res) {
    return res.render('tgs');
  };

  exports.list = function(req, res) {
    return res.send('respond with a resource');
  };

}).call(this);
