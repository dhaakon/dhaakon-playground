// Generated by CoffeeScript 1.6.3
(function() {
  var Booking, BookingInformation, Config, EventManager, Events, Main, Map,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  Config = {
    Settings: {
      jsonPath: '/json/world.json',
      csvPath: '/csv/booking_small.csv',
      renderer: 'canvas'
    },
    Map: {
      container: '#map-container',
      height: 768,
      width: 1224,
      scale: 500,
      xOffset: 0,
      yOffset: -230,
      scaleMin: 0.75,
      scaleMax: 10,
      projections: ['stereographic', 'orthographic', 'mercator', 'gnomonic', 'equirectangular', 'conicEquidistant', 'conicConformal', 'conicEqualArea', 'azimuthalEquidistant', 'azimuthalEqualArea', 'albersUsa', 'transverseMercator'],
      projectionKey: 2,
      markerSize: 0.5,
      booker_lat_source: 'booker_lat',
      booker_lon_source: 'booker_lon',
      tour_lat_source: 'tour_lat',
      tour_lon_source: 'tour_lon'
    }
  };

  BookingInformation = (function() {
    BookingInformation.prototype.$tourTitle = null;

    BookingInformation.prototype.$bookerCityTitle = null;

    BookingInformation.prototype.$tourCityTitle = null;

    function BookingInformation() {
      this.init();
    }

    BookingInformation.prototype.init = function() {
      this.$tourCityTitle = $('#tour-city');
      this.$bookerCityTitle = $('#booker-city');
      return this.$tourTitle = $('#tour-title');
    };

    BookingInformation.prototype.changeTourTitle = function(text) {
      return this.$tourTitle.find('span').html(text);
    };

    BookingInformation.prototype.changeTourCityTitle = function(text) {
      return this.$tourCityTitle.find('span').html(text);
    };

    BookingInformation.prototype.changeBookerCityTitle = function(text) {
      return this.$bookerCityTitle.find('span').html(text);
    };

    return BookingInformation;

  })();

  Booking = (function() {
    function Booking(src) {
      this.src = src;
      this.onBookingLoaded = __bind(this.onBookingLoaded, this);
      this.createBooking();
    }

    Booking.prototype.createBooking = function() {
      return d3.csv(this.src, this.onBookingLoaded);
    };

    Booking.prototype.onBookingLoaded = function(error, data) {
      this.data = data;
      return EventManager.emitEvent(Events.BOOKING_LOADED);
    };

    return Booking;

  })();

  EventManager = new EventEmitter();

  Events = {
    MAP_LOADED: 'onMapLoaded',
    BOOKING_LOADED: 'onBookingLoaded',
    MARKER_FOCUS: 'onMarkerFocus'
  };

  Map = (function() {
    Map.prototype.NEIGHBORS = 'neighbors';

    Map.prototype.COUNTRIES = 'countries';

    Map.prototype.projector = d3.geo;

    Map.prototype.color = d3.scale.category10();

    Map.prototype.renderer = Config.Settings.renderer;

    Map.prototype.type = 'countries';

    Map.prototype.projectionType = Config.Map.projections[Config.Map.projectionKey];

    Map.prototype.scale = Config.Map.scale;

    Map.prototype.xOffset = Config.Map.xOffset;

    Map.prototype.yOffset = Config.Map.yOffset;

    Map.prototype.scaleMin = Config.Map.scaleMin;

    Map.prototype.scaleMax = Config.Map.scaleMax;

    Map.prototype.t_lat_source = Config.Map.tour_lat_source;

    Map.prototype.t_lon_source = Config.Map.tour_lon_source;

    Map.prototype.b_lat_source = Config.Map.booker_lat_source;

    Map.prototype.b_lon_source = Config.Map.booker_lon_source;

    Map.prototype.markerSize = Config.Map.markerSize;

    Map.prototype.svg = null;

    Map.prototype.canvas = null;

    Map.prototype.group = null;

    Map.prototype.width = null;

    Map.prototype.height = null;

    Map.prototype.container = null;

    Map.prototype.projection = null;

    Map.prototype.data = null;

    Map.prototype.countries = null;

    Map.prototype.neighbors = null;

    function Map(src, width, height, container) {
      this.src = src;
      this.width = width;
      this.height = height;
      this.container = container;
      this.onDataRead = __bind(this.onDataRead, this);
      this.update = __bind(this.update, this);
      this.drawPointsOnCanvas = __bind(this.drawPointsOnCanvas, this);
      this.createPath = __bind(this.createPath, this);
      this.createProjection = __bind(this.createProjection, this);
      this.updateCanvas = __bind(this.updateCanvas, this);
      this.updateSVG = __bind(this.updateSVG, this);
      this.zoomed = __bind(this.zoomed, this);
      this.onMouseWheel = __bind(this.onMouseWheel, this);
      this.fillNeighbors = __bind(this.fillNeighbors, this);
      this.onMarkerMouseOver = __bind(this.onMarkerMouseOver, this);
      this.addListeners();
      if (this.renderer === 'canvas') {
        this.createCanvas();
      } else {
        this.createSVG();
      }
      this.readJSON();
    }

    Map.prototype.addListeners = function() {};

    Map.prototype.createSVG = function() {
      this.svg = d3.select(this.container).append('svg').attr('id', 'svg-map').attr('width', this.width).attr('height', this.height);
      return this.group = this.svg.append('g');
    };

    Map.prototype.createCanvas = function() {
      this.canvas = d3.select(this.container).append('canvas').attr('width', this.width).attr('height', this.height).attr('id', 'marker-canvas').call(d3.behavior.zoom().scaleExtent([this.scaleMin, this.scaleMax]).on('zoom', this.zoomed));
      return this.context = this.canvas.node().getContext('2d');
    };

    Map.prototype.readJSON = function() {
      return d3.json(this.src, this.onDataRead);
    };

    Map.prototype.drawMap = function() {
      this.drawBackground();
      this.drawGrid();
      return this.drawCountries();
    };

    Map.prototype.drawGrid = function() {
      switch (this.renderer) {
        case 'svg':
          return this.group.append("path").datum(d3.geo.graticule()).attr("d", this.path).style("fill", "none").style("stroke", "#ffffff").style("stroke-width", "0.5px");
      }
    };

    Map.prototype.drawBackground = function() {
      switch (this.renderer) {
        case 'svg':
          return this.group.append("path").datum({
            type: "Sphere"
          }).attr("d", this.path).style("fill", "#93C2FF");
      }
    };

    Map.prototype.createPoints = function(data) {
      var _this = this;
      this.data = data;
      switch (this.renderer) {
        case 'svg':
          return this.group.selectAll('circle').data(data).enter().append('circle').attr('r', this.markerSize).attr('fill', 'rgba(150,0,0,0.4)').attr('transform', function(d) {
            var coords;
            coords = _this.projection([d[_this.b_lon_source], d[_this.b_lat_source]]);
            return 'translate(' + coords + ')';
          }).on('mouseover', this.onMarkerMouseOver);
      }
    };

    Map.prototype.onMarkerMouseOver = function(d) {
      return EventManager.emitEvent(Events.MARKER_FOCUS, [d]);
    };

    Map.prototype.fillNeighbors = function(d, i) {
      var a, b, colorString, fn, g, r,
        _this = this;
      fn = function(n) {
        return _this.countries[n].color;
      };
      r = i - 50;
      b = i;
      g = i + 0;
      a = 0.6;
      colorString = 'rgba(' + [r, g, b, a].join(',') + ')';
      return colorString;
    };

    Map.prototype.drawCountries = function() {
      switch (this.renderer) {
        case 'svg':
          return this.group.selectAll('.country').data(this.countries).enter().insert('path', '.graticule').attr('class', 'country').attr('d', this.path).style('fill', this.fillNeighbors).style('stroke', 'rgba(100,100,255,1)');
        case 'canvas':
          this.context.fillStyle = '#d7c7ad';
          this.context.beginPath();
          this.path(this.neighbors);
          this.context.fill();
          this.path(this.countries);
          this.context.stroke();
          console.log(this.path(this.countries));
          return console.log(this.context);
      }
    };

    Map.prototype.onMouseMove = function() {
      var m;
      return m = d3.mouse(this);
    };

    Map.prototype.onMouseWheel = function(e) {
      var m;
      return m = d3.event.wheelDeltaY;
    };

    Map.prototype.zoomed = function() {
      return this.updateSVG(d3.event.translate, d3.event.scale);
    };

    Map.prototype.updateSVG = function(pos, scale) {
      var _str;
      _str = 'translate(' + pos.join(',') + ')scale(' + scale + ')';
      return this.group.attr('transform', _str);
    };

    Map.prototype.updateCanvas = function(pos, scale) {
      var _str;
      _str = 'translate(' + pos.join(',') + ')scale(' + scale + ')';
      this.context.save();
      this.context.clearRect(0, 0, this.width, this.height);
      this.context.translate(pos[0], pos[1]);
      this.context.scale(scale[0], scale[1]);
      this.drawPointsOnCanvas();
      return this.context.restore();
    };

    Map.prototype.createProjection = function() {
      return this.projection = this.projector[this.projectionType]().scale(this.scale).translate([(this.width / 2) - this.xOffset, (this.height / 2) - this.yOffset]);
    };

    Map.prototype.createPath = function() {
      switch (this.renderer) {
        case 'canvas':
          this.path = d3.geo.path().projection(this.projection).context(this.context);
          return console.log(d3.geo.path().projection(this.projection).context(this.context)(this.countries));
        case 'svg':
          return this.path = d3.geo.path().projection(this.projection);
      }
    };

    Map.prototype.drawPointsOnCanvas = function() {
      var d, i, n, p, _results;
      if (this.data == null) {
        return;
      }
      i = -1;
      n = this.data.length - 1;
      _results = [];
      while (++i < n) {
        d = this.data[i];
        _results.push(p = this.projection([d.tour_lat, d.tour_lon]));
      }
      return _results;
    };

    Map.prototype.update = function() {
      return this.drawMap();
    };

    Map.prototype.onDataRead = function(error, world) {
      this.countries = topojson.feature(world, world.objects[this.COUNTRIES]).features;
      this.neighbors = topojson.neighbors(world.objects[this.COUNTRIES].geometries);
      this.createProjection();
      this.createPath();
      this.drawMap();
      return EventManager.emitEvent(Events.MAP_LOADED);
    };

    return Map;

  })();

  Main = (function() {
    Main.prototype.JSON_PATH = Config.Settings.jsonPath;

    Main.prototype.CSV_PATH = Config.Settings.csvPath;

    Main.prototype.mapHeight = Config.Map.height;

    Main.prototype.mapWidth = Config.Map.width;

    Main.prototype.map = null;

    Main.prototype.bookingInformation = null;

    Main.prototype.mapContainer = Config.Map.container;

    Main.prototype.svg = null;

    Main.prototype.container = null;

    function Main() {
      this.onMarkerFocused = __bind(this.onMarkerFocused, this);
      this.onBookingLoaded = __bind(this.onBookingLoaded, this);
      this.onMapLoaded = __bind(this.onMapLoaded, this);
      this.addListeners();
      this.createMap();
    }

    Main.prototype.createBookingData = function() {
      return this.booking = new Booking(this.CSV_PATH);
    };

    Main.prototype.addListeners = function() {
      EventManager.addListener(Events.MAP_LOADED, this.onMapLoaded);
      return EventManager.addListener(Events.BOOKING_LOADED, this.onBookingLoaded);
    };

    Main.prototype.onMapLoaded = function() {
      return this.createBookingData();
    };

    Main.prototype.onBookingLoaded = function(event) {
      this.map.createPoints(this.booking.data);
      this.bookingInformation = new BookingInformation();
      return EventManager.addListener(Events.MARKER_FOCUS, this.onMarkerFocused);
    };

    Main.prototype.onMarkerFocused = function(event) {
      this.bookingInformation.changeTourTitle(event.booking_id);
      this.bookingInformation.changeTourCityTitle(event.tour_address);
      return this.bookingInformation.changeBookerCityTitle(event.booker_country);
    };

    Main.prototype.createMap = function() {
      return this.map = new Map(this.JSON_PATH, this.mapWidth, this.mapHeight, this.mapContainer);
    };

    return Main;

  })();

  $(document).ready((function() {
    return new Main();
  }));

}).call(this);
