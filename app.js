// Generated by CoffeeScript 1.6.3
(function() {
  var Backbone, Router, Routes, Server, SocketServer, r, server,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Backbone = require('backbone');

  Router = require('./routes/routes.js');

  Routes = (function() {
    function Routes() {
      this.routes = new Backbone.Collection();
    }

    return Routes;

  })();

  r = new Routes();

  SocketServer = (function() {
    SocketServer.prototype.io = require('socket.io');

    function SocketServer(server, http) {
      this.server = server;
      this.http = http;
      this.onConnectionHandler = __bind(this.onConnectionHandler, this);
      this.createSocket();
    }

    SocketServer.prototype.createSocket = function() {
      this.socket = this.io.listen(this.server);
      return this.addConnection();
    };

    SocketServer.prototype.addConnection = function() {
      return this.socket.sockets.on('connection', this.onConnectionHandler);
    };

    SocketServer.prototype.onConnectionHandler = function(socket) {
      console.log(socket);
      return socket.emit('location', {
        lat: 0,
        long: 200
      });
    };

    return SocketServer;

  })();

  Server = (function() {
    Server.prototype.express = require('express');

    Server.prototype.http = require('http');

    Server.prototype.path = require('path');

    Server.prototype.app = null;

    Server.prototype.server = null;

    Server.prototype.routes = null;

    function Server() {
      this.app = this.express();
      this.setUpExpress();
      this.setUpRoutes();
      this.createServer();
    }

    Server.prototype.setUpExpress = function() {
      this.app.set('port', process.env.PORT || 3000);
      this.app.set('views', this.path.join(__dirname, 'views'));
      this.app.set('view engine', 'jade');
      this.app.set('view options', {
        pretty: true
      });
      this.app.use(this.express.favicon());
      this.app.use(this.express.logger('dev'));
      this.app.use(this.express.json());
      this.app.use(this.express.urlencoded());
      this.app.use(this.express.methodOverride());
      this.app.use(this.app.router);
      return this.app.use(this.express["static"](this.path.join(__dirname, 'public')));
    };

    Server.prototype.setUpRoutes = function() {
      this.app.get('/', Router.index);
      this.app.get('/users', Router.list);
      this.app.get('/demos/:type', Router.demos);
      this.app.get('/maps/:renderer', Router.map);
      this.app.get('/codem', Router.codem);
      this.app.get('/loaders', Router.loaders);
      this.app.get('/tgsData', Router.thinkData);
      this.app.get('/tgs/:role', Router.tgs);
      this.app.get('/location/:lat/:long', Router.getlocation);
      this.app.get('/students/', Router.getstudents);
      this.app.get('/tgslocations/', Router.tgslocations);
      if ('development' === this.app.get('env')) {
        return this.app.use(this.express.errorHandler());
      }
    };

    Server.prototype.createServer = function() {
      var _this = this;
      this.server = this.http.createServer(this.app);
      this.socket = new SocketServer(this.server, this.http);
      return this.server.listen(this.app.get('port'), function() {
        return console.log('Express server listening on port' + _this.app.get('port'));
      });
    };

    return Server;

  })();

  server = server || new Server();

}).call(this);
